Short explanation of how to do signing and verifying in
idsCommunications clients:

The three header files idsCommunications clients need to sign and verify
buffers are:
  transDuo.h        - holds raw and signed buffers
  transformSign.h   - to perform and add the signature
  untransformSign.h - to verify and strip the signature

An example program that uses these facilities is
"demosigningaggregator.c". This is based heavily on the
"demoaggregator.c". There is also "demosigningdetector.c" that just
signs reports (it doesn't listen for any messages so has no need to
verify signatures).

In "demosigningaggregator.c", the "onReportArrive()" function verifies a
MessageInfo payload before continuing processing of it. It does:

   // parse and verify, gives a "struct TransDuo *"
   transDuoFromBuffer()
   // make sure we got the type we were expecting
   transDuoGetTag() == signTag
   // get the verified buffer
   transDuoRawGet()
   transDuoRawLengthGet()
   // clean "struct TransDuo*" from "transDuoFromBuffer()"
   transDuoDestroy()

The "detectorSend()" function creates a signed payload. It does:

   // to sign and append the signature to the given buffer
   transDuoAdd()
   // to copy a marshaled version of the signed buffer
   transDuoBufferDup()
   transDuoBufferLengthGet()

The "stateCreate()" and "stateDestroy()" functions set up and clean up
an outbound TransDuo and Transform to use for signing. They do:

   stateCreate:

   // initialize TransDuo processing
   transDuoInit()
   // Get a manager to manage TransDuos
   transDuoManagerCreate()
   // create a TransDuo for outbound MessageInfo payloads
   transDuoCreate()
   // create a Transform for signing
   transformSignCreate()
   // create a Untransform for signing
   // (does verify and strip signature)
   untransformSignCreate()
   // register the Untransform with the TransDuo
   // processing code (so transDuoFromBuffer() can find
   // the proper Untransform to use)
   transDuoUntransformRegister()

   stateDestroy:

   // clean up the TransDuo created in stateCreate()
   transDuoDestroy()
   // clean up the TransDuoManager that was being used.
   transDuoManagerDestroy()
   // clean up the internal TransDuo processing data
   transDuoFini()
   // clean up the signing transform
   signingTransform->transformDestroy(signingTransform)

The header files have fairly extensive comments on these and other
functions in the interface.

The "transformSignCreate()" and "untransformSignCreate()" functions take
paths to files that contain keys. The "privatekey.dat" and
"publickey.dat" file are examples of these files (and are, by default,
loaded by demosigningdetector and demosigningaggregator). These key
files were created by using the key_authority/nnp-keygen code and a
little bit of text editing.

