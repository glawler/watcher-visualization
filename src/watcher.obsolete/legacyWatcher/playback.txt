Writing idsCommunications clients to support API event playback
===============================================================

Clients whose activity is driven by API events (e.g., messages
received) can be written in a style that allows them to support two
modes of operation: 

 (1) live operation, in which the client interacts
     with a daemon (e.g., liveinterim), and
 (2) offline operation, in which the client run standalone
     and reads API events from a file.

See demoaggregator.c for a sample client that supports offline 
operation (with -r <file>) as well as event recording (-w <file>).

To support offline as well as live operation, follow these basic
guidelines:

 (1) When running offline, instead of a traditional select()
     loop, you'll want to do a loop running 
     communicationsLogStep() .  If you have timeouts or periodic
     processing to do, use the 'step' argument (measured in 
     milliseconds) as you would use a select() timeout argument.
     See selectLoop() in demoaggregator.c.

 (2) Replace all calls to time() or gettimeofday() with 
     communicationsTimevalGet() or communicationsDestimeGet().
     These will return system time when running live, or the 
     virtual "playback time" when doing playback.  You can also
     use the cheaper communicationsLastEventTimeGet(), which 
     will return the time of the most recent API event without
     doing an additional system call in live mode.  If you're
     in an API callback, all three functions should return the 
     same time.

The approach above will give you "as fast as possible" playback (but
the client will see the original event times).  If you really want
"real time" playback instead (e.g., because your client will be
interacting with other components), then you'll need adapt your select()
loop using communicationsLogNextEventTimeGet() to determine how long a
timeout to give select() (if it returns 0, call communicationsLogStep() 
with a 'step' argument of 0 to process a single event).  (If you 
implement this "real time" model, please make a note of it here so we
can point to it as a sample.)

See goodwin.txt for more information on API event recording.
