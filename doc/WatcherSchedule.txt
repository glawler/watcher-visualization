Demo/Checkpoints
1. Basic new network transport demo - 3rd/4th week in April - Completed.
- Run existing test node daemons and new network shim daemon
- Run barebones watcherd that only supports 'real time' streams
- Run messageStream2Text, which dumps test nodes' message streams to
console
- Shows: messages from test nodes demultiplexed through new watcherd to
a "GUI" client. 

2. Network transport transition layer (don't depend on hierarchy for transport) - late May
- Don't run hierarchy daemon. :) 
- Run test node daemons updated to use new network API: gpsDaemon, route daemon, and maybe the WHD if ARL wants it.  
- Run watcherd instance
- Run legacyWatcher (using new network API), or just the text-based "GUI" log dumper program, messageStream2Text.
- [optional if done in time - update legacyWatcher to not use hierarchy]

3. Full TiVO mode/playback functionality -- end of June. 
This demo shows that the new watcherd has the DB and TiVO-mode message
streaming engine complete. 
- Run test node daemons
- Run watcherd
- Run legacy watcher (with rewind control added to GUI)
- Show live pause, rewind, fast-forward (to current time)
- Stop test node daemons, watcherd, legacy watcher. 
- Start recorded playback from database using watcherd
- Show pause, rewind, fast-forward, etc in legacy watcher
- TiVO mode demo shows full watcherd functionality including playback
via packet capture database 

4. Run legacyWatcher with new API and show new features. End of June (probably
concurrent with demo #3 above). 
- Run test node daemons
- Run watcherd
- Run legacy watcher
- Show existing layers in GUI (menu, etc)
- From testnode create new layer via labelMessageTest -l "Hello" -y "new layer"
- Show that the new layer is in the GUI and toggles. 
    (Shows new feature: dynamic layers, test node driven, client-side handled.) 
- Close watcher to save state
- Show the new layer information is saved in the cfg. 
    (Shows support for automatic, loadable display settings.)
- Edit new layer in local cfg file and restart watcher.
- Edit cfg file and modify deafult node label to default setting, like
    "oneOctet" to 'fourOctet". 
- Show that the new layer display characteristics have changed. 
    (Shows new feature: client-side, GUI-specific display characteristics.)
    (Shows support for automatic, loadable display settings.)
- Show that new node label has taken effect. 
    (Shows new feature: default node label config.)

4. TBD, end of July (or mid August), last
checkpoint/demo. 
- first cut of game-engine based watcher GUI (most likely task)
- specific functionality needed by ARL from SOW or other
- Use boost.python to create a python interface for both communiction APIs.
- other/TDB

5. Documentation checkpoint - end of July - 
- Shows: "User documentation and design
documentation to enable ARL to use and extend this software as needed
(contractor format ...)".

----------------------------------------------------------
Option task milestones:

1. Basic Google Earth Watcher GUI demo (GE as watcherd GUI)
- Run test node daemons
- Run watcherd
- Run Google Earth w/watcher plugin. 
- Shows: Basic watcher functionality in Google Earth: node location,
node connectivity, labels, layers

2. Refined Google Earth Demo 
- As "Basic Google Earth" demo above.
- Shows: Refinements to basic Google Earth implementation based on
feedback from ARL, Cobham (nee SPARTA). 

